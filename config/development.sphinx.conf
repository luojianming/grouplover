indexer
{
}

searchd
{
  listen = 127.0.0.1:9310
  log = /home/ljm/RailsWorkspace/grouplover_v2/log/searchd.log
  query_log = /home/ljm/RailsWorkspace/grouplover_v2/log/searchd.query.log
  pid_file = /home/ljm/RailsWorkspace/grouplover_v2/log/searchd.development.pid
  max_matches = 1000
}

source group_core_0
{
  type = mysql
  sql_host = localhost
  sql_user = root
  sql_pass = root
  sql_db = grouplover_development
  sql_sock = /var/run/mysqld/mysqld.sock
  sql_query_pre = SET NAMES utf8
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query = SELECT SQL_NO_CACHE `groups`.`id` * CAST(3 AS SIGNED) + 0 AS `id` , `groups`.`name` AS `name`, `groups`.`location` AS `location`, `groups`.`sex` AS `sex`, `groups`.`id` AS `sphinx_internal_id`, 0 AS `sphinx_deleted`, 2885774273 AS `class_crc`, `groups`.`member_counts` AS `member_counts` FROM `groups`  WHERE (`groups`.`id` >= $start AND `groups`.`id` <= $end) GROUP BY `groups`.`id` ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`id`), 1), IFNULL(MAX(`id`), 1) FROM `groups` 
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_uint = class_crc
  sql_attr_uint = member_counts
  sql_query_info = SELECT * FROM `groups` WHERE `id` = (($id - 0) / 3)
}

index group_core
{
  path = /home/ljm/RailsWorkspace/grouplover_v2/db/sphinx/development/group_core
  charset_type = utf-8
  ngram_len = 1
  ngram_chars = U+3000..U+2FA1F
  source = group_core_0
}

index group
{
  type = distributed
  local = group_core
}

source invitation_core_0
{
  type = mysql
  sql_host = localhost
  sql_user = root
  sql_pass = root
  sql_db = grouplover_development
  sql_sock = /var/run/mysqld/mysqld.sock
  sql_query_pre = SET NAMES utf8
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query = SELECT SQL_NO_CACHE `invitations`.`id` * CAST(3 AS SIGNED) + 1 AS `id` , `invitations`.`location` AS `location`, `invitations`.`time` AS `time`, `groups`.`location` AS `city`, `groups`.`sex` AS `sex`, `invitations`.`id` AS `sphinx_internal_id`, 0 AS `sphinx_deleted`, 3191890546 AS `class_crc`, `groups`.`member_counts` AS `group_member_counts` FROM `invitations` LEFT OUTER JOIN `groups` ON `groups`.`id` = `invitations`.`initiate_group_id` WHERE (`invitations`.`id` >= $start AND `invitations`.`id` <= $end) GROUP BY `invitations`.`id` ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`id`), 1), IFNULL(MAX(`id`), 1) FROM `invitations` 
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_uint = class_crc
  sql_attr_uint = group_member_counts
  sql_query_info = SELECT * FROM `invitations` WHERE `id` = (($id - 1) / 3)
}

index invitation_core
{
  path = /home/ljm/RailsWorkspace/grouplover_v2/db/sphinx/development/invitation_core
  charset_type = utf-8
  ngram_len = 1
  ngram_chars = U+3000..U+2FA1F
  source = invitation_core_0
}

index invitation
{
  type = distributed
  local = invitation_core
}

source user_core_0
{
  type = mysql
  sql_host = localhost
  sql_user = root
  sql_pass = root
  sql_db = grouplover_development
  sql_sock = /var/run/mysqld/mysqld.sock
  sql_query_pre = SET NAMES utf8
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query = SELECT SQL_NO_CACHE `users`.`id` * CAST(3 AS SIGNED) + 2 AS `id` , `profiles`.`sex` AS `user_sex`, `users`.`name` AS `name`, `profiles`.`location` AS `user_location`, `profiles`.`hometown` AS `user_hometown`, `profiles`.`school` AS `user_school`, `users`.`id` AS `sphinx_internal_id`, 0 AS `sphinx_deleted`, 765557111 AS `class_crc` FROM `users` LEFT OUTER JOIN `profiles` ON `profiles`.`user_id` = `users`.`id` WHERE (`users`.`id` >= $start AND `users`.`id` <= $end) GROUP BY `users`.`id` ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`id`), 1), IFNULL(MAX(`id`), 1) FROM `users` 
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_uint = class_crc
  sql_query_info = SELECT * FROM `users` WHERE `id` = (($id - 2) / 3)
}

index user_core
{
  path = /home/ljm/RailsWorkspace/grouplover_v2/db/sphinx/development/user_core
  charset_type = utf-8
  ngram_len = 1
  ngram_chars = U+3000..U+2FA1F
  source = user_core_0
}

index user
{
  type = distributed
  local = user_core
}
